name: Build and test
description: Build projects, run tests and check coverage using Gradle

inputs:
  push-images:
    description: Whether to push images to git hub packages or not
    required: false
    default: 'false'
outputs:
  version:
    description: The image tag used in the build
    value: ${{ steps.version.outputs.version }}
  changed-projects:
    description: A JSON array of projects that changed
    value: ${{ steps.check-changes.outputs.projects }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - id: check-changes
      uses: ./.github/actions/check-changes
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - uses: gradle/wrapper-validation-action@v1

    - name: Set version
      id: version
      shell: bash
      run: |
        version=$(date '+%Y-%m-%d').${{ github.run_number }}.$(echo ${{ github.sha }} | cut -c1-7)
        echo version=$version
        echo "ORG_GRADLE_PROJECT_version=$version" >> $GITHUB_ENV
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Set Gradle properties
      shell: bash
      run: echo -e "\norg.gradle.jvmargs=-Xmx1g -XX:MaxMetaspaceSize=512m" >> gradle.properties

    - name: Configure Gradle
      uses: gradle/gradle-build-action@v2
      with:
        cache-read-only: false

    - name: Compile and Test
      shell: bash
      run: ./gradlew check

    - name: Pull base image and set env var for base image
      if: ${{ inputs.push-images == 'true' }}
      shell: bash
      run: |
        docker pull eclipse-temurin:17-jre-alpine
        echo "JIB_FROM_IMAGE=docker://$(docker inspect --format='{{index .RepoDigests 0}}' eclipse-temurin:17-jre-alpine)" >> $GITHUB_ENV

    - name: Jib Image Push
      if: ${{ inputs.push-images == 'true' }}
      shell: bash
      env:
        GITHUB_USERNAME: ${{ github.actor }}
        GITHUB_PASSWORD: ${{ github.token }}
      run: ./gradlew jib

    - name: Build standalone docker images
      shell: bash
      run: ./gradlew docker

    - name: Login to GitHub Container Registry
      if: ${{ inputs.push-images == 'true' }}
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Docker Image Push
      if: ${{ inputs.push-images == 'true' }}
      shell: bash
      run: ./gradlew dockerTagsPush

    - name: Sonar analysis
      uses: gradle/gradle-build-action@v2
      if: ${{ github.actor != 'dependabot[bot]' }}
      continue-on-error: true # don't fail the build when sonarcloud.io is down
      with:
        arguments: sonar

    - name: Publish test reports
      uses: mikepenz/action-junit-report@v3.3.3
      if: always() && github.actor != 'dependabot[bot]'
      with:
        check_name: |-
          Unit test results
          Integration test results
        report_paths: |-
          **/build/test-results/test/TEST-*.xml
          **/build/test-results/integrationTest/TEST-*.xml
