name: Setup database access (Delius AWS)
description: Configure credentials and audit user in the Delius database

inputs:
  project:
    description: Project
  environment:
    description: Environment
  aws-access-key-id:
    description: Delius AWS Access Key ID
  aws-secret-access-key:
    description: Delius AWS Secret Access Key
  aws-role-arn:
    description: Delius AWS Role ARN

runs:
  using: composite
  steps:
    - name: Get environment details
      uses: ./.github/actions/get-env-details
      id: env
      with:
        environment: ${{ inputs.environment }}

    - name: Authenticate with Delius AWS account
      uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8
      with:
        aws-region: eu-west-2
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Add DB credentials to AWS parameter store
      shell: bash
      run: |
        secret=$(kubectl get secret "$PROJECT-database" -o json)
        aws ssm put-parameter --name "$PARAMETER_PATH/db-username" --value "$(echo "$secret" | jq -r '.data.DB_USERNAME | @base64d')" --overwrite --type SecureString --region eu-west-2
        aws ssm put-parameter --name "$PARAMETER_PATH/db-password" --value "$(echo "$secret" | jq -r '.data.DB_PASSWORD | @base64d')" --overwrite --type SecureString --region eu-west-2
      env:
        PROJECT: ${{ inputs.project }}
        PARAMETER_PATH: '/${{ steps.env.outputs.delius-name }}/delius/probation-integration/${{ inputs.project }}'

    - name: Execute SSM Automation document
      shell: bash
      run: |
        aws ssm start-automation-execution --document-name oracle-${{ steps.env.outputs.delius-short-name }}-probation-integration-access \
                                           --parameters "Configuration='$(yq database/access.yml -o json)'" \
                                           --region eu-west-2 \
        | jq --raw-output '.AutomationExecutionId' > id
        while [ -z "$status" ] || [ "$status" == "InProgress" ] || [ "$status" == "Pending" ] || [ "$status" == "Waiting" ]; do
          sleep 5
          echo "Execution $status. Follow the logs in AWS: https://eu-west-2.console.aws.amazon.com/systems-manager/automation/execution/$(cat id)?region=eu-west-2"
          status=$(aws ssm get-automation-execution --automation-execution-id "$(cat id)" | jq -r '.AutomationExecution.AutomationExecutionStatus')
        done
        echo "Completed with status: $status"
        if [ "$status" != "Success" ]; then exit 1; fi
      working-directory: projects/${{ inputs.project }}/deploy
