name: Format code
description: Format Kotlin and Java code using IntelliJ IDEA.

inputs:
  commit_message:
    description: Commit message
    default: Formatting changes
  idea_version:
    description: IntelliJ IDEA version, defaults to latest
    default: latest
  token:
    description: GitHub token to use for pushing changes. Defaults to GitHub actions token.
    required: false
  mask:
    description: |
      Specify a comma-separated list of file masks that define the files to be processed. You can use the * (any string)
      and ? (any single character) wildcards.
    default: "*.kt,*.kts,*.java"
  dry:
    description: |
      Run the formatter in the validation mode. The formatter will perform the same formatting operations in memory and 
      will exit with a non-zero status in case any of the formatted files differs from the original one.
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Use GitHub token
      if: inputs.token == 'github'
      shell: bash
      run: echo "token=${{ github.token }}" >> $GITHUB_ENV

    - name: Use provided token
      if: inputs.token != 'github'
      shell: bash
      run: echo "token=${{ inputs.token }}" >> $GITHUB_ENV

    - name: Checkout pull request
      uses: actions/checkout@v4
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ env.token }}

    - name: Checkout branch
      uses: actions/checkout@v4
      if: github.event_name != 'pull_request'
      with:
        ref: ${{ github.ref }}
        token: ${{ env.token }}

    - name: Install dependencies
      shell: bash
      run: sudo apt update && sudo apt-get install -y libxml2-utils

    - name: Check for the latest version of IntelliJ IDEA
      id: latest
      shell: bash
      run: |
        if [ "$version" = "latest" ]; then
          curl -fsSL https://www.jetbrains.com/updates/updates.xml > /tmp/updates.xml
          version=$(xmllint --xpath 'string(//products/product[@name="IntelliJ IDEA"]/channel[@name="IntelliJ IDEA RELEASE"]/build[1]/@version)' /tmp/updates.xml)
        fi
        echo "version=$version" >> $GITHUB_OUTPUT
      env:
        version: ${{ inputs.idea_version }}

    - name: Download IntelliJ IDEA Community Edition
      shell: bash
      run: |
        curl -fsSL https://download.jetbrains.com/idea/ideaIC-$version.tar.gz | tar -xz
        mv idea-* /tmp/idea
      env:
        version: ${{ steps.latest.outputs.version }}

    - name: Validate code formatting
      if: inputs.dry == 'true'
      shell: bash
      run: /tmp/idea/bin/idea.sh format -allowDefaults -mask "$mask" -dry -r .
      env:
        mask: ${{ inputs.mask }}

    - name: Fix code formatting and stage changes
      # Note: formatting runs twice, as sometimes IntelliJ makes additional changes the second time around
      if: inputs.dry == 'false'
      shell: bash
      run: |
        /tmp/idea/bin/idea.sh format -allowDefaults -mask "$mask" -r .
        /tmp/idea/bin/idea.sh format -allowDefaults -mask "$mask" -r .
        git add .
      env:
        mask: ${{ inputs.mask }}

    - name: Commit and push
      if: inputs.dry == 'false'
      uses: dsanders11/github-app-commit-action@48d2ff8c1a855eb15d16afa97ae12616456d7cbc # v1.4.0
      with:
        fail-on-no-changes: false
        message: ${{ inputs.commit_message }}
        token: ${{ env.token }}
