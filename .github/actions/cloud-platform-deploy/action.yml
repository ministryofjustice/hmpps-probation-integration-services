name: Cloud Platform Deploy
description: Deploy to Cloud Platform using Helm

inputs:
  project:
    description: The project to deploy
    required: true
  environment:
    description: The environment name to deploy to (test/preprod/prod)
    required: true
  version:
    description: The version of the service to deploy
    required: true
  api:
    description: The KUBE_ENV_API
    required: true
  cert:
    description: The KUBE_CERT
    required: true
  cluster:
    description: The KUBE_CLUSTER
    required: true
  namespace:
    description: The KUBE_NAMESPACE
    required: true
  token:
    description: The KUBE_TOKEN
    required: true
  ip-allowlists:
    description: The HMPPS IP allow list groups to apply, in base64-encoded YAML format
    required: true
  gradle-cache-role:
    description: Role required for accessing Gradle cache
    required: true
  gradle-cache-encryption-key:
    description: Gradle cache encryption key. Required for configuration caching.
    required: true

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4

    - name: Get environment details
      uses: ./.github/actions/get-env-details
      id: env
      with:
        environment: ${{ inputs.environment }}

    - name: Get build info
      uses: ./.github/actions/get-build-info
      with:
        project: ${{ inputs.project }}
        version: ${{ inputs.version }}
        gradle-cache-role: ${{ inputs.gradle-cache-role }}
        gradle-cache-encryption-key: ${{ inputs.gradle-cache-encryption-key }}

    - name: Authenticate
      uses: ./.github/actions/cloud-platform-auth
      with:
        api: ${{ inputs.api }}
        cert: ${{ inputs.cert }}
        cluster: ${{ inputs.cluster }}
        namespace: ${{ inputs.namespace }}
        token: ${{ inputs.token }}

    - name: Deploy
      shell: bash
      run: |
        yq -i ".appVersion = \"${{ inputs.version }}\"" "projects/${{ inputs.project }}/deploy/Chart.yaml"

        echo '::group::Install Helm dependencies'
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install helm
        helm dependency update "projects/${{ inputs.project }}/deploy"
        echo '::endgroup::'

        set +o pipefail
        for attempt in $(seq 1 $MAX_ATTEMPTS); do
          echo "::group::Helm upgrade (attempt $attempt)"
          exec helm upgrade '${{ inputs.project }}' 'projects/${{ inputs.project }}/deploy' \
            --atomic \
            --history-max 10 \
            --force \
            --install \
            --reset-values \
            --set 'version=${{ inputs.version }}' \
            --set 'generic-service.image.tag=${{ inputs.version }}' \
            --set 'generic-service.env.VERSION=${{ inputs.version }}' \
            --set "generic-service.env.BUILD_INFO=$([ -r "$BUILD_INFO" ] && cat "$BUILD_INFO" | base64 -w0 || echo)" \
            --set "generic-service.env.GIT_INFO=$([ -r "$GIT_INFO" ] && cat "$GIT_INFO" | base64 -w0 || echo)" \
            --timeout 10m \
            --values <(echo "$IP_ALLOWLISTS" | base64 -d) \
            --values templates/helm-defaults.yml \
            --values 'projects/${{ inputs.project }}/deploy/values.yaml' \
            --values 'projects/${{ inputs.project }}/deploy/${{ steps.env.outputs.values-file }}' \
            --wait 2>&1 | tee "helm-$attempt.log"
          exit_code=${PIPESTATUS[0]}
          echo "Exit code: $exit_code" 
          echo '::endgroup::'
        
          # Retry Helm upgrade if we get a timeout error from MOJ Cloud Platform
          if [ $exit_code -eq 1 ] && grep -q timeout "helm-$attempt.log"; then continue; else exit $exit_code; fi
        done
        if [ $exit_code -ne 0 ]; then exit $exit_code; fi
      env:
        BUILD_INFO: projects/${{ inputs.project }}/build-info.properties
        GIT_INFO: projects/${{ inputs.project }}/git.properties
        IP_ALLOWLISTS: ${{ inputs.ip-allowlists }}
        MAX_ATTEMPTS: '3'