name: Bootstrap
# Perform initial project setup to enable development of a new service

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: Project name
        required: true
        type: string
      project_template:
        description: Project template
        required: true
        type: choice
        default: message-listener-with-api-client
        options:
          - api-client-and-server
          - api-server
          - message-listener
          - message-listener-with-api-client
          - message-listener-with-api-client-and-server
          - 'No template - I want to create the project from scratch'
      create_database_credentials:
        description: Will the service access the Delius database?
        default: true
        required: true
        type: boolean
      create_sentry_project:
        description: Will the service use Sentry for capturing exceptions?
        default: true
        required: true
        type: boolean
      create_oauth_client:
        description: Will the service consume another HTTP API that requires HMPPS Auth client credentials?
        default: true
        required: true
        type: boolean
      create_ingress:
        description: Will the service provide a HTTP API that requires access from MOJ Cloud Platform?
        default: false
        required: true
        type: boolean

jobs:
  auth-setup:
    runs-on: ubuntu-latest
    if: ${{ inputs.create_oauth_client }}
    steps:
      - run: |
          echo Request HMPPS Auth credentials: https://mojdt.slack.com/archives/C02S71KUBED
          echo '*Manual step required* - [Request HMPPS Auth Credentials](https://mojdt.slack.com/archives/C02S71KUBED)' >> $GITHUB_STEP_SUMMARY
      - run: |
          echo Store HMPPS Auth Credentials in GitHub secrets: https://github.com/ministryofjustice/hmpps-probation-integration-services/settings/secrets/actions/new
          echo '*Manual step required* - [Store HMPPS Auth Credentials in GitHub secrets](https://github.com/ministryofjustice/hmpps-probation-integration-services/settings/secrets/actions/new)' >> $GITHUB_STEP_SUMMARY

  db-secrets-setup:
    runs-on: ubuntu-latest
    if: ${{ inputs.create_database_credentials }}
    steps:
      - uses: actions/checkout@v3

      # convert project name to environment variable (e.g. 'hello-world' -> 'HELLO_WORLD')
      - id: project_name
        run: |
          echo "with_underscores=$(echo '${{ inputs.project_name }}' | sed 's/-/_/g')" >> $GITHUB_OUTPUT
          echo "with_underscores_uppercase=$(echo '${{ inputs.project_name }}' | sed 's/-/_/g' | tr '[:lower:]' '[:upper:]')" >> $GITHUB_OUTPUT

      - name: Set database username
        run: gh secret set "$NAME" --body "$VALUE" --app actions
        env:
          NAME: ${{ steps.project_name.outputs.with_underscores_uppercase }}_DB_USERNAME
          VALUE: ${{ steps.project_name.outputs.with_underscores }}
          GITHUB_TOKEN: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

      - uses: ./.github/actions/random-secret
        with:
          environment: test
          name: ${{ steps.project_name.outputs.with_underscores_uppercase }}_DB_PASSWORD
          token: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

      - uses: ./.github/actions/random-secret
        with:
          environment: preprod
          name: ${{ steps.project_name.outputs.with_underscores_uppercase }}_DB_PASSWORD
          token: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

      - uses: ./.github/actions/random-secret
        with:
          environment: prod
          name: ${{ steps.project_name.outputs.with_underscores_uppercase }}_DB_PASSWORD
          token: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

  project-setup:
    if: ${{ inputs.project_template != 'No template - I want to create the project from scratch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

      - name: Render project template
        uses: ./.github/actions/render-project-template
        with:
          project_name: ${{ inputs.project_name }}
          project_template: ${{ inputs.project_template }}

      - name: Create pull request
        id: pr
        uses: peter-evans/create-pull-request@v4
        with:
          add-paths: |
            settings.gradle.kts
            .idea/runConfigurations/*
            .github/workflows/deploy.yml
            .github/workflows/end-to-end-tests.yml
            projects/${{ inputs.project_name }}/*
          commit-message: Create initial project for ${{ inputs.project_name }}
          title: Create initial project for ${{ inputs.project_name }}
          body: Automated changes by [hmpps-probation-integration-services](https://github.com/ministryofjustice/hmpps-probation-integration-services/actions/workflows/bootstrap.yml)
          base: main
          branch: bootstrap/${{ inputs.project_name }}
          author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
          token: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

      - name: Output pull request
        run: |
          echo Merge pull request for initial project: ${{ steps.pr.outputs.pull-request-url }}
          echo '*Manual step required* - [Merge pull request for initial project](${{ steps.pr.outputs.pull-request-url }})' >> $GITHUB_STEP_SUMMARY

  terraform-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          path: hmpps-delius-core-terraform
          repository: ministryofjustice/hmpps-delius-core-terraform

      - name: Render Terraform service template
        if: ${{ ! inputs.create_ingress }}
        run: sed 's/$SERVICE_NAME/${{ inputs.project_name }}/g' templates/service.tf > 'hmpps-delius-core-terraform/application/probation-integration-services/${{ inputs.project_name }}.tf'

      - name: Render Terraform service with load-balancer template
        if: ${{ inputs.create_ingress }}
        run: sed 's/$SERVICE_NAME/${{ inputs.project_name }}/g' templates/service-with-load-balancer.tf > 'hmpps-delius-core-terraform/application/probation-integration-services/${{ inputs.project_name }}.tf'

      - name: Create pull request
        id: pr
        uses: peter-evans/create-pull-request@v4
        with:
          path: hmpps-delius-core-terraform
          commit-message: Create ECS service for ${{ inputs.project_name }}
          title: Create ECS service for ${{ inputs.project_name }}
          body: Automated changes by [hmpps-probation-integration-services](https://github.com/ministryofjustice/hmpps-probation-integration-services/actions/workflows/bootstrap.yml)
          branch: probation-integration/create-${{ inputs.project_name }}
          token: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

      - name: Output pull request
        run: |
          echo Merge pull request for infrastructure code: ${{ steps.pr.outputs.pull-request-url }}
          echo '*Manual step required* - [Merge pull request for infrastructure code](${{ steps.pr.outputs.pull-request-url }})' >> $GITHUB_STEP_SUMMARY

  sentry-setup:
    runs-on: ubuntu-latest
    if: ${{ inputs.create_sentry_project }}
    steps:
      # convert project name to environment variable (e.g. 'hello-world' -> 'HELLO_WORLD')
      - id: project_name
        run: echo "with_underscores=$(echo '${{ inputs.project_name }}' | tr '[:lower:]' '[:upper:]' | sed 's/-/_/g')" >> $GITHUB_OUTPUT

      - name: Create project
        id: project
        run: |
          response=$(curl https://sentry.io/api/0/teams/ministryofjustice/probation-integration/projects/ --fail \
            -H 'Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -d '{"name":"${{ inputs.project_name }}"}')
          echo "slug=$(echo $response | jq -r '.slug')" >> $GITHUB_OUTPUT

      - name: Set platform to Kotlin
        run: |
          curl -X PUT https://sentry.io/api/0/projects/ministryofjustice/${{ steps.project.outputs.slug }}/ --fail \
            -H 'Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -d '{"platform":"kotlin"}'

      - name: Get client key (DSN)
        id: client_key
        run: |
          response=$(curl https://sentry.io/api/0/projects/ministryofjustice/${{ steps.project.outputs.slug }}/keys/ --fail \
                  -H 'Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}')
          id=$(echo $response | jq -r '.[0].id')
          dsn=$(echo $response | jq -r '.[0].dsn.public')
          echo "::add-mask::$dsn"
          echo "dsn=$dsn" >> $GITHUB_OUTPUT
          echo "id=$id" >> $GITHUB_OUTPUT

      - name: Store DSN as GitHub secret
        uses: mmercan/actions-set-secret@da197fb79d8c1ecedcde53fbd32a4b02ece5723a # v/4.0.0
        with:
          name: ${{ steps.project_name.outputs.with_underscores }}_SENTRY_DSN
          value: ${{ steps.client_key.outputs.dsn }}
          token: ${{ secrets.EXTERNAL_GITHUB_TOKEN }}

      # see https://github.com/getsentry/sentry/issues/18904
      - run: |
          echo Set up Sentry rate-limiting: https://sentry.io/settings/ministryofjustice/projects/${{ steps.project.outputs.slug }}/keys/${{ steps.client_key.outputs.id }}
          echo '*Manual step required* - [Set up Sentry rate-limiting](https://sentry.io/settings/ministryofjustice/projects/${{ steps.project.outputs.slug }}/keys/${{ steps.client_key.outputs.id }})' >> $GITHUB_STEP_SUMMARY

      # see https://github.com/getsentry/sentry/issues/36968
      - run: |
          echo Create a Sentry alert: https://sentry.io/organizations/ministryofjustice/alerts/new/issue/?createFromDuplicate=true&duplicateRuleId=11530702&project=prison-case-notes-to-probation
          echo '*Manual step required* - [Create a Sentry alert](https://sentry.io/organizations/ministryofjustice/alerts/new/issue/?createFromDuplicate=true&duplicateRuleId=11530702&project=prison-case-notes-to-probation)' >> $GITHUB_STEP_SUMMARY
          echo '> :memo: Note: the above link will duplicate an alert from `prison-case-notes-to-probation`.  Make sure to update the Project to `${{ inputs.project_name }}` in the drop-down.' >> $GITHUB_STEP_SUMMARY
