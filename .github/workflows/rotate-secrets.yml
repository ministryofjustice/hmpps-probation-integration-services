name: Rotate secrets

on:
  schedule:
    - cron: 0 12 1 */3 * # Midday on the first day of every third month
  workflow_dispatch:
    inputs:
      projects:
        description: Project
        type: choice
        required: true
        options:
          - All
          - accredited-programmes-and-delius
          - accredited-programmes-and-oasys
          - appointment-reminders-and-delius
          - approved-premises-and-delius
          - approved-premises-and-oasys
          - arns-and-delius
          - assess-for-early-release-and-delius
          - assessment-summary-and-delius
          - breach-notice-and-delius
          - cas2-and-delius
          - cas3-and-delius
          - common-platform-and-delius
          - core-person-record-and-delius
          - court-case-and-delius
          - create-and-vary-a-licence-and-delius
          - custody-key-dates-and-delius
          - domain-events-and-delius
          - dps-and-delius
          - effective-proposal-framework-and-delius
          - esupervision-and-delius
          - external-api-and-delius
          - find-and-refer-and-delius
          - hdc-licences-and-delius
          - hmpps-auth-and-delius
          - hmpps-common-platform-event-receiver
          - ims-and-delius
          - jitbit-and-delius
          - justice-email-and-delius
          - make-recall-decisions-and-delius
          - manage-offences-and-delius
          - manage-pom-cases-and-delius
          - manage-supervision-and-delius
          - oasys-and-delius
          - offender-events-and-delius
          - opd-and-delius
          - pathfinder-and-delius
          - person-search-index-from-delius
          - pre-sentence-reports-to-delius
          - prison-case-notes-to-probation
          - prison-custody-status-to-delius
          - prison-education-and-delius
          - prison-identifier-and-delius
          - prisoner-profile-and-delius
          - probation-search-and-delius
          - refer-and-monitor-and-delius
          - resettlement-passport-and-delius
          - risk-assessment-scores-to-delius
          - sentence-plan-and-delius
          - sentence-plan-and-oasys
          - soc-and-delius
          - subject-access-requests-and-delius
          - suicide-risk-form-and-delius
          - tier-to-delius
          - unpaid-work-and-delius
          - workforce-allocations-to-delius

permissions:
  contents: read
  id-token: write

jobs:
  get-projects:
    uses: ./.github/workflows/get-projects.yml
    with:
      projects: ${{ inputs.projects || 'All' }}

  rotate-database-password:
    runs-on: ubuntu-latest
    needs: get-projects
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        environment:
          - test
        # TODO the following environments can be enabled once the Delius database has migrated to the MOJ modernisation platform
        # - preprod
        # - prod
        project: ${{ fromJSON(needs.get-projects.outputs.projects) }}
    environment: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v5

      - name: Check if DB access is required
        id: check_file
        uses: andstor/file-existence-action@076e0072799f4942c8bc574a82233e1e4d13e9d6 # v2
        with:
          files: projects/${{ matrix.project }}/deploy/database/access.yml

      - name: Authenticate to MOJ Cloud Platform
        if: steps.check_file.outputs.files_exists == 'true'
        uses: ./.github/actions/cloud-platform-auth
        with:
          api: ${{ secrets.KUBE_ENV_API }}
          cert: ${{ secrets.KUBE_CERT }}
          cluster: ${{ secrets.KUBE_CLUSTER }}
          namespace: ${{ secrets.KUBE_NAMESPACE }}
          token: ${{ secrets.KUBE_TOKEN }}

      - name: Create new credentials
        if: steps.check_file.outputs.files_exists == 'true'
        run: |
          sudo apt-get install pwgen

          if kubectl get secret "$PROJECT-database" >/dev/null; then
            echo Backing up existing secret... 
            if kubectl get secret "$PROJECT-database-prev" >/dev/null; then kubectl delete secret "$PROJECT-database-prev"; fi
            kubectl get secret "$PROJECT-database" -o json \
              | jq --arg name "$PROJECT-database-prev" '.metadata.name = $name | del(.metadata.uid, .metadata.resourceVersion, .metadata.creationTimestamp, .metadata.managedFields)' \
              | kubectl apply -f -
          fi
          echo Deleting secret...
          kubectl delete secret "$PROJECT-database"
          echo Generating new secret...
          DB_PASSWORD="$(pwgen -s -N1 16)"
          echo "::add-mask::$DB_PASSWORD"
          kubectl create secret generic "$PROJECT-database" \
            --from-literal "DB_USERNAME=${PROJECT//-/_}" \
            --from-literal "DB_PASSWORD=$DB_PASSWORD"
        env:
          PROJECT: ${{ matrix.project }}

      - name: Authenticate to MOJ Modernisation Platform
        if: steps.check_file.outputs.files_exists == 'true'
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ secrets.MODERNISATION_PLATFORM_AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd
          role-session-name: probation-integration-database-access-${{ github.run_number }}
          role-duration-seconds: 1200

      - name: Create SQL script
        if: steps.check_file.outputs.files_exists == 'true'
        run: |
          username=$(kubectl get secret "$PROJECT-database" -o json | jq -r '.data.DB_USERNAME | @base64d')
          password=$(kubectl get secret "$PROJECT-database" -o json | jq -r '.data.DB_PASSWORD | @base64d')
          echo "alter user $username account unlock; alter user $username identified by "'"'"$password"'"'";" > ./script.sql
        shell: bash
        env:
          PROJECT: ${{ matrix.project }}

      - name: Run SQL script
        if: steps.check_file.outputs.files_exists == 'true'
        run: |
          instance_id=$(aws ec2 describe-instances --filters 'Name=tag:database,Values=delius_primarydb' --query 'Reservations[0].Instances[].InstanceId' --output text)
          command_id=$(aws ssm send-command \
           --document-name "AWS-RunShellScript" \
           --parameters "commands='base64 -d <<<$(base64 -w0 ./script.sql) | sudo -u oracle -i sqlplus -s / as sysdba'" \
           --instance-ids "$instance_id" | jq -r '.Command.CommandId')
          
          echo "Started command with id=$command_id"
          echo "To view the logs, first log in to https://moj.awsapps.com/start then open https://eu-west-2.console.aws.amazon.com/systems-manager/run-command/$command_id"
          echo "Waiting for command to complete..."
          timeout 300 sh -c "until aws ssm wait command-executed --command-id '$command_id' --instance-id '$instance_id'; do echo Retrying...; done"
          echo "Completed with status: $(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance_id" --query "Status" --output text)"
          exit "$(aws ssm get-command-invocation --command-id "$command_id" --instance-id "$instance_id" --query "ResponseCode" --output text)"
        shell: bash

      - name: Restart deployment
        if: steps.check_file.outputs.files_exists == 'true'
        run: |
          if kubectl get deploy "$PROJECT"; then
            kubectl rollout restart deploy "$PROJECT"
            kubectl rollout status deployment "$PROJECT" --timeout=5m
          fi
        env:
          PROJECT: ${{ matrix.project }}

  notify:
    if: always() && !cancelled() && github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs:
      - rotate-database-password
    strategy:
      matrix:
        channel:
          - probation-integration-notifications
    steps:
      - name: Send message to Slack
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        if: ${{ !contains(needs.*.result, 'failure') }}
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ matrix.channel }}",
              "text": "Database password rotation",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🔐 Database passwords updated"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📝 Logs"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Send failure message to Slack
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        if: ${{ contains(needs.*.result, 'failure') }}
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "probation-integration-notifications",
              "text": "Database password rotation failure",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ Failed to update database passwords"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "The integration services may be in an invalid state. Please check the logs and re-run the workflow."
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📝 Logs"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

