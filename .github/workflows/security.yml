name: Security

on:
  schedule:
    - cron: "30 5 * * MON-FRI" # Every weekday at 05:30 UTC
  workflow_dispatch:

jobs:
  get-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.get-projects.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
      - id: get-projects
        run: echo "projects=$(cd projects && ls | jq --raw-input . | jq --slurp --compact-output .)" >> $GITHUB_OUTPUT

  trivy-scan:
    runs-on: ubuntu-latest
    needs:
      - get-projects
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.get-projects.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3

      - name: Scan image
        uses: aquasecurity/trivy-action@9ab158e8597f3b310480b9a69402b419bc03dbd5 # v0.8.0
        with:
          image-ref: 'ghcr.io/ministryofjustice/hmpps-probation-integration-services/${{ matrix.project }}:latest'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          format: 'sarif'
          output: 'trivy-results.sarif'
          trivyignores: 'projects/${{ matrix.project }}/.trivyignore'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Get Trivy results
        if: failure()
        uses: aquasecurity/trivy-action@9ab158e8597f3b310480b9a69402b419bc03dbd5 # v0.8.0
        with:
          image-ref: 'ghcr.io/ministryofjustice/hmpps-probation-integration-services/${{ matrix.project }}:latest'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'json'
          output: 'results.json'
          trivyignores: 'projects/${{ matrix.project }}/.trivyignore'

      - name: Output Trivy results
        id: trivy
        if: failure()
        run: |
          results=$(cat results.json | jq -r '.Results[].Vulnerabilities[]? | ("><" + .PrimaryURL + "|" + .VulnerabilityID + "> (" + .Severity + ") - " + .PkgName + ":" + .InstalledVersion)')
          echo "results=${results//$'\n'/\\n}" >> $GITHUB_OUTPUT
          echo $results

      - name: Send message to Slack
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'probation-integration-notifications'
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":trivy: *${{ matrix.project }}* failed security scan"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View job"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ steps.trivy.outputs.results }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  veracode-scan:
    runs-on: ubuntu-latest
    needs:
      - get-projects
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build jars
        uses: gradle/gradle-build-action@v2
        with:
          arguments: jar

      - name: Package jars
        run: find . -name *.jar | zip -r package.zip -@

      - name: Upload to Veracode
        uses: veracode/veracode-uploadandscan-action@0.2.4
        with:
          appname: hmpps-probation-integration-services
          createprofile: false
          deleteincompletescan: 2 # force delete any incomplete scans
          filepath: package.zip
          vid: ${{ secrets.CYBERSECURITY_VERACODE_API_ID }}
          vkey: ${{ secrets.CYBERSECURITY_VERACODE_API_KEY }}
