{
  "description": "Split text into chunks and generate embeddings",
  "processors": [
    {
      "gsub": {
        "tag": "Remove any repeated non-alphanumeric strings. The pattern looks for 2 or more non-alphanumeric characters surrounded by whitespace.",
        "field": "notes",
        "pattern": "(^|\\s)[^A-Za-z0-9\\s]{2,}(\\s|$)",
        "replacement": " ",
        "ignore_missing": true,
        "ignore_failure": true
      }
    },
    {
      "text_chunking": {
        "algorithm": {
          "fixed_token_length": {
            "token_limit": 128,
            "overlap_rate": 0.125,
            "tokenizer": "standard"
          }
        },
        "field_map": {
          "notes": "textChunks"
        }
      }
    },
    {
      "foreach": {
        "description": "Pad each text chunk using the reserved '[PAD]' token",
        "field": "textChunks",
        "processor": {
          "gsub": {
            "field": "_ingest._value",
            "pattern": "$",
            "replacement
          }
        }
      }
    },
    {
      "foreach": {
        "description": "Trim each text chunk to ensure there are still at most 128 tokens per chunk",
        "field": "textChunks",
        "processor": {
          "gsub": {
            "field": "_ingest._value",
            "pattern": "^((?:\\S+\\s+){127}\\S+).*",
            "replacement": "$1"
          }
        }
      }
    },
    {
      "text_embedding": {
        "model_id": "${model_id}",
        "field_map": {
          "textChunks": "textEmbedding"
        }
      }
    }
  ]
}