input {
    sqs {
        id => "poll-for-changes"
        queue => "${CONTACT_SEMANTIC_SQS_QUEUE_NAME}"
        endpoint => "${SQS_ENDPOINT:https://sqs.eu-west-2.amazonaws.com}"
        region => "eu-west-2"
    }
}

filter {
    json {
        id => "parse-nested-json"
        source => "Message"
    }
    if [MessageAttributes][eventType][Value] != "CONTACT_DELETED" {
        # Search to see if the CRN already exists in either the primary or semantic index
        http {
            id => "search-for-crn-on-primary"
            url => "${SEARCH_INDEX_HOST}/${CONTACT_SEMANTIC_INDEX_PREFIX}-primary/_search"
            query => { routing => "%{crn}" }
            verb => "GET"
            body => '{
              "size": 0,
              "terminate_after": 1,
              "track_total_hits": false,
              "query": { "term": { "crn": { "value": "%{crn}" } } }
            }'
            body_format => "json"
            target_body => "[@metadata][http_response_primary]"
        }
        mutate { add_field => { "[@metadata][crn_exists_in_primary_index]" => "%{[@metadata][http_response_primary][terminated_early]}" } }
        mutate { convert => { "[@metadata][crn_exists_in_primary_index]" => "boolean" } }
        http {
            id => "search-for-crn-on-standby"
            url => "${SEARCH_INDEX_HOST}/${CONTACT_SEMANTIC_INDEX_PREFIX}-standby/_search"
            query => { routing => "%{crn}" }
            verb => "GET"
            body => '{
              "size": 0,
              "terminate_after": 1,
              "track_total_hits": false,
              "query": { "term": { "crn": { "value": "%{crn}" } } }
            }'
            body_format => "json"
            target_body => "[@metadata][http_response_standby]"
        }
        mutate { add_field => { "[@metadata][crn_exists_in_standby_index]" => "%{[@metadata][http_response_standby][terminated_early]}" } }
        mutate { convert => { "[@metadata][crn_exists_in_standby_index]" => "boolean" } }

        if [@metadata][crn_exists_in_primary_index] or [@metadata][crn_exists_in_standby_index] {
            jdbc_streaming {
                id => "load-db-record"
                jdbc_driver_library => "/etc/logstash/ojdbc11.jar"
                jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
                jdbc_connection_string => "${JDBC_CONNECTION_STRING}"
                jdbc_user => "${JDBC_USER}"
                jdbc_password => "${JDBC_PASSWORD}"
                jdbc_validate_connection => true
                jdbc_validation_timeout => 120
                statement => "${INCREMENTAL_STATEMENT_SQL}"
                use_prepared_statements => true
                prepared_statement_name => "search_indexer_contact_semantic_incremental"
                prepared_statement_bind_values => ["%{sourceId}", "%{sourceId}", "%{sourceId}", "%{sourceId}"]
                target => "db"
                tag_on_default_use => []
                use_cache => false
            }
            prune { whitelist_names => ["@timestamp", "sourceId", "db", "tags", "Message", "MessageAttributes"] }
            if [db][0][json] {
                json {
                    id => "parse-db-json"
                    source => "[db][0][json]"
                }
                mutate { remove_field => ["db", "Message", "MessageAttributes"] }
            } else {
                mutate { add_tag => ["contact_not_found_in_database"] }
            }
        }
    }
    if [tags] and [tags][0] {
        # Remove sensitive information on error
        prune { whitelist_names => ["@timestamp", "sourceId", "tags"] }
    }
}

output {
    if ![tags] or ![tags][0] {
        if [MessageAttributes][eventType][Value] == "CONTACT_DELETED" {
            opensearch {
                id => "delete-from-primary"
                hosts => ["${SEARCH_INDEX_HOST}"]
                index => "${CONTACT_SEMANTIC_INDEX_PREFIX}-primary"
                routing => "%{crn}"
                document_id => "%{sourceId}"
                action => "delete"
                validate_after_inactivity => 0
            }
            opensearch {
                id => "delete-from-standby"
                hosts => ["${SEARCH_INDEX_HOST}"]
                index => "${CONTACT_SEMANTIC_INDEX_PREFIX}-standby"
                routing => "%{crn}"
                document_id => "%{sourceId}"
                action => "delete"
                validate_after_inactivity => 0
            }
        } else {
            if [@metadata][crn_exists_in_primary_index] {
                opensearch {
                    id => "index-into-primary"
                    hosts => ["${SEARCH_INDEX_HOST}"]
                    index => "${CONTACT_SEMANTIC_INDEX_PREFIX}-primary"
                    routing => "%{crn}"
                    document_id => "%{sourceId}"
                    action => "%{[@metadata][action]}"
                    version => "%{rowVersion}"
                    version_type => "external"
                    validate_after_inactivity => 0
                    failure_type_logging_whitelist => ["version_conflict_engine_exception"]
                }
            }
            if [@metadata][crn_exists_in_standby_index] {
                opensearch {
                    id => "index-into-standby"
                    hosts => ["${SEARCH_INDEX_HOST}"]
                    index => "${CONTACT_SEMANTIC_INDEX_PREFIX}-standby"
                    routing => "%{crn}"
                    document_id => "%{sourceId}"
                    action => "%{[@metadata][action]}"
                    version => "%{rowVersion}"
                    version_type => "external"
                    validate_after_inactivity => 0
                    failure_type_logging_whitelist => ["version_conflict_engine_exception"]
                }
            }
        }
    } else {
        stdout { codec => "json" }
    }
}